
// DO NOT EDIT, AUTOGENERATED FILE

#include <Python.h>
#include "ts3_module.h"

void callEventHandler(const char * methodName, PyObject *kwargs){
	PyObject * clientEventHandlerIterator = getClientEventHandlerIterator();
	if(!PyIter_Check(clientEventHandlerIterator)){
		printf("clientEventHandlerIterator is not iterable\n");
		return;
	}
	
	PyObject * item;
	while ((item = PyIter_Next(clientEventHandlerIterator)) != NULL) {
		PyObject * method = PyObject_GetAttrString(item, methodName);
		if(!PyCallable_Check(method)){
			printf("ClientEventHandler's method %s is not callable\n", methodName);
			} else {
			PyObject * tuple = PyTuple_New(0);
			PyObject * value = PyObject_Call(method, tuple, kwargs);
			if(!value){
				printf("Method call failed in %s\n", methodName);
				if(PyErr_Occurred()){
					PyErr_Print();
				}
			}
			Py_XDECREF(value);
			Py_XDECREF(tuple);
		}
		Py_XDECREF(method);
		Py_XDECREF(item);
	}
	Py_XDECREF(clientEventHandlerIterator);
}
void ts3plugin_onConnectStatusChangeEvent(uint64 serverConnectionHandlerID, int newStatus, unsigned int errorNumber) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onConnectStatusChangeEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", newStatus);
	PyDict_SetItemString(kwargs, "newStatus", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", errorNumber);
	PyDict_SetItemString(kwargs, "errorNumber", temp);
	Py_XDECREF(temp);
	callEventHandler("onConnectStatusChangeEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onNewChannelEvent(uint64 serverConnectionHandlerID, uint64 channelID, uint64 channelParentID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onNewChannelEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelParentID);
	PyDict_SetItemString(kwargs, "channelParentID", temp);
	Py_XDECREF(temp);
	callEventHandler("onNewChannelEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onNewChannelCreatedEvent(uint64 serverConnectionHandlerID, uint64 channelID, uint64 channelParentID, anyID invokerID, const char* invokerName, const char* invokerUniqueIdentifier) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onNewChannelCreatedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelParentID);
	PyDict_SetItemString(kwargs, "channelParentID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", invokerID);
	PyDict_SetItemString(kwargs, "invokerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", invokerName);
	PyDict_SetItemString(kwargs, "invokerName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", invokerUniqueIdentifier);
	PyDict_SetItemString(kwargs, "invokerUniqueIdentifier", temp);
	Py_XDECREF(temp);
	callEventHandler("onNewChannelCreatedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onDelChannelEvent(uint64 serverConnectionHandlerID, uint64 channelID, anyID invokerID, const char* invokerName, const char* invokerUniqueIdentifier) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onDelChannelEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", invokerID);
	PyDict_SetItemString(kwargs, "invokerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", invokerName);
	PyDict_SetItemString(kwargs, "invokerName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", invokerUniqueIdentifier);
	PyDict_SetItemString(kwargs, "invokerUniqueIdentifier", temp);
	Py_XDECREF(temp);
	callEventHandler("onDelChannelEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onChannelMoveEvent(uint64 serverConnectionHandlerID, uint64 channelID, uint64 newChannelParentID, anyID invokerID, const char* invokerName, const char* invokerUniqueIdentifier) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onChannelMoveEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", newChannelParentID);
	PyDict_SetItemString(kwargs, "newChannelParentID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", invokerID);
	PyDict_SetItemString(kwargs, "invokerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", invokerName);
	PyDict_SetItemString(kwargs, "invokerName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", invokerUniqueIdentifier);
	PyDict_SetItemString(kwargs, "invokerUniqueIdentifier", temp);
	Py_XDECREF(temp);
	callEventHandler("onChannelMoveEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onUpdateChannelEvent(uint64 serverConnectionHandlerID, uint64 channelID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onUpdateChannelEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	callEventHandler("onUpdateChannelEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onUpdateChannelEditedEvent(uint64 serverConnectionHandlerID, uint64 channelID, anyID invokerID, const char* invokerName, const char* invokerUniqueIdentifier) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onUpdateChannelEditedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", invokerID);
	PyDict_SetItemString(kwargs, "invokerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", invokerName);
	PyDict_SetItemString(kwargs, "invokerName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", invokerUniqueIdentifier);
	PyDict_SetItemString(kwargs, "invokerUniqueIdentifier", temp);
	Py_XDECREF(temp);
	callEventHandler("onUpdateChannelEditedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onUpdateClientEvent(uint64 serverConnectionHandlerID, anyID clientID, anyID invokerID, const char* invokerName, const char* invokerUniqueIdentifier) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onUpdateClientEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", invokerID);
	PyDict_SetItemString(kwargs, "invokerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", invokerName);
	PyDict_SetItemString(kwargs, "invokerName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", invokerUniqueIdentifier);
	PyDict_SetItemString(kwargs, "invokerUniqueIdentifier", temp);
	Py_XDECREF(temp);
	callEventHandler("onUpdateClientEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientMoveEvent(uint64 serverConnectionHandlerID, anyID clientID, uint64 oldChannelID, uint64 newChannelID, int visibility, const char* moveMessage) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientMoveEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", oldChannelID);
	PyDict_SetItemString(kwargs, "oldChannelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", newChannelID);
	PyDict_SetItemString(kwargs, "newChannelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", visibility);
	PyDict_SetItemString(kwargs, "visibility", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", moveMessage);
	PyDict_SetItemString(kwargs, "moveMessage", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientMoveEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientMoveSubscriptionEvent(uint64 serverConnectionHandlerID, anyID clientID, uint64 oldChannelID, uint64 newChannelID, int visibility) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientMoveSubscriptionEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", oldChannelID);
	PyDict_SetItemString(kwargs, "oldChannelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", newChannelID);
	PyDict_SetItemString(kwargs, "newChannelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", visibility);
	PyDict_SetItemString(kwargs, "visibility", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientMoveSubscriptionEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientMoveTimeoutEvent(uint64 serverConnectionHandlerID, anyID clientID, uint64 oldChannelID, uint64 newChannelID, int visibility, const char* timeoutMessage) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientMoveTimeoutEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", oldChannelID);
	PyDict_SetItemString(kwargs, "oldChannelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", newChannelID);
	PyDict_SetItemString(kwargs, "newChannelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", visibility);
	PyDict_SetItemString(kwargs, "visibility", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", timeoutMessage);
	PyDict_SetItemString(kwargs, "timeoutMessage", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientMoveTimeoutEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientMoveMovedEvent(uint64 serverConnectionHandlerID, anyID clientID, uint64 oldChannelID, uint64 newChannelID, int visibility, anyID moverID, const char* moverName, const char* moverUniqueIdentifier, const char* moveMessage) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientMoveMovedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", oldChannelID);
	PyDict_SetItemString(kwargs, "oldChannelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", newChannelID);
	PyDict_SetItemString(kwargs, "newChannelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", visibility);
	PyDict_SetItemString(kwargs, "visibility", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", moverID);
	PyDict_SetItemString(kwargs, "moverID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", moverName);
	PyDict_SetItemString(kwargs, "moverName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", moverUniqueIdentifier);
	PyDict_SetItemString(kwargs, "moverUniqueIdentifier", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", moveMessage);
	PyDict_SetItemString(kwargs, "moveMessage", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientMoveMovedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientKickFromChannelEvent(uint64 serverConnectionHandlerID, anyID clientID, uint64 oldChannelID, uint64 newChannelID, int visibility, anyID kickerID, const char* kickerName, const char* kickerUniqueIdentifier, const char* kickMessage) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientKickFromChannelEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", oldChannelID);
	PyDict_SetItemString(kwargs, "oldChannelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", newChannelID);
	PyDict_SetItemString(kwargs, "newChannelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", visibility);
	PyDict_SetItemString(kwargs, "visibility", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", kickerID);
	PyDict_SetItemString(kwargs, "kickerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", kickerName);
	PyDict_SetItemString(kwargs, "kickerName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", kickerUniqueIdentifier);
	PyDict_SetItemString(kwargs, "kickerUniqueIdentifier", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", kickMessage);
	PyDict_SetItemString(kwargs, "kickMessage", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientKickFromChannelEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientKickFromServerEvent(uint64 serverConnectionHandlerID, anyID clientID, uint64 oldChannelID, uint64 newChannelID, int visibility, anyID kickerID, const char* kickerName, const char* kickerUniqueIdentifier, const char* kickMessage) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientKickFromServerEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", oldChannelID);
	PyDict_SetItemString(kwargs, "oldChannelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", newChannelID);
	PyDict_SetItemString(kwargs, "newChannelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", visibility);
	PyDict_SetItemString(kwargs, "visibility", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", kickerID);
	PyDict_SetItemString(kwargs, "kickerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", kickerName);
	PyDict_SetItemString(kwargs, "kickerName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", kickerUniqueIdentifier);
	PyDict_SetItemString(kwargs, "kickerUniqueIdentifier", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", kickMessage);
	PyDict_SetItemString(kwargs, "kickMessage", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientKickFromServerEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientIDsEvent(uint64 serverConnectionHandlerID, const char* uniqueClientIdentifier, anyID clientID, const char* clientName) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientIDsEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", uniqueClientIdentifier);
	PyDict_SetItemString(kwargs, "uniqueClientIdentifier", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", clientName);
	PyDict_SetItemString(kwargs, "clientName", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientIDsEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientIDsFinishedEvent(uint64 serverConnectionHandlerID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientIDsFinishedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientIDsFinishedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onServerEditedEvent(uint64 serverConnectionHandlerID, anyID editerID, const char* editerName, const char* editerUniqueIdentifier) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onServerEditedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", editerID);
	PyDict_SetItemString(kwargs, "editerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", editerName);
	PyDict_SetItemString(kwargs, "editerName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", editerUniqueIdentifier);
	PyDict_SetItemString(kwargs, "editerUniqueIdentifier", temp);
	Py_XDECREF(temp);
	callEventHandler("onServerEditedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onServerUpdatedEvent(uint64 serverConnectionHandlerID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onServerUpdatedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	callEventHandler("onServerUpdatedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
int ts3plugin_onServerErrorEvent(uint64 serverConnectionHandlerID, const char* errorMessage, unsigned int error, const char* returnCode, const char* extraMessage) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onServerErrorEvent\n");
		return 0;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", errorMessage);
	PyDict_SetItemString(kwargs, "errorMessage", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", error);
	PyDict_SetItemString(kwargs, "error", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", returnCode);
	PyDict_SetItemString(kwargs, "returnCode", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", extraMessage);
	PyDict_SetItemString(kwargs, "extraMessage", temp);
	Py_XDECREF(temp);
	callEventHandler("onServerErrorEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return 0;
}
void ts3plugin_onServerStopEvent(uint64 serverConnectionHandlerID, const char* shutdownMessage) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onServerStopEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", shutdownMessage);
	PyDict_SetItemString(kwargs, "shutdownMessage", temp);
	Py_XDECREF(temp);
	callEventHandler("onServerStopEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
int ts3plugin_onTextMessageEvent(uint64 serverConnectionHandlerID, anyID targetMode, anyID toID, anyID fromID, const char* fromName, const char* fromUniqueIdentifier, const char* message, int ffIgnored) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onTextMessageEvent\n");
		return 0;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", targetMode);
	PyDict_SetItemString(kwargs, "targetMode", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", toID);
	PyDict_SetItemString(kwargs, "toID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", fromID);
	PyDict_SetItemString(kwargs, "fromID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", fromName);
	PyDict_SetItemString(kwargs, "fromName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", fromUniqueIdentifier);
	PyDict_SetItemString(kwargs, "fromUniqueIdentifier", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", message);
	PyDict_SetItemString(kwargs, "message", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", ffIgnored);
	PyDict_SetItemString(kwargs, "ffIgnored", temp);
	Py_XDECREF(temp);
	callEventHandler("onTextMessageEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return 0;
}
void ts3plugin_onTalkStatusChangeEvent(uint64 serverConnectionHandlerID, int status, int isReceivedWhisper, anyID clientID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onTalkStatusChangeEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", status);
	PyDict_SetItemString(kwargs, "status", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", isReceivedWhisper);
	PyDict_SetItemString(kwargs, "isReceivedWhisper", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	callEventHandler("onTalkStatusChangeEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onConnectionInfoEvent(uint64 serverConnectionHandlerID, anyID clientID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onConnectionInfoEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	callEventHandler("onConnectionInfoEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onServerConnectionInfoEvent(uint64 serverConnectionHandlerID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onServerConnectionInfoEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	callEventHandler("onServerConnectionInfoEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onChannelSubscribeEvent(uint64 serverConnectionHandlerID, uint64 channelID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onChannelSubscribeEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	callEventHandler("onChannelSubscribeEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onChannelSubscribeFinishedEvent(uint64 serverConnectionHandlerID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onChannelSubscribeFinishedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	callEventHandler("onChannelSubscribeFinishedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onChannelUnsubscribeEvent(uint64 serverConnectionHandlerID, uint64 channelID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onChannelUnsubscribeEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	callEventHandler("onChannelUnsubscribeEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onChannelUnsubscribeFinishedEvent(uint64 serverConnectionHandlerID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onChannelUnsubscribeFinishedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	callEventHandler("onChannelUnsubscribeFinishedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onChannelDescriptionUpdateEvent(uint64 serverConnectionHandlerID, uint64 channelID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onChannelDescriptionUpdateEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	callEventHandler("onChannelDescriptionUpdateEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onChannelPasswordChangedEvent(uint64 serverConnectionHandlerID, uint64 channelID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onChannelPasswordChangedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	callEventHandler("onChannelPasswordChangedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onPlaybackShutdownCompleteEvent(uint64 serverConnectionHandlerID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onPlaybackShutdownCompleteEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	callEventHandler("onPlaybackShutdownCompleteEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onSoundDeviceListChangedEvent(const char* modeID, int playOrCap) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onSoundDeviceListChangedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("s", modeID);
	PyDict_SetItemString(kwargs, "modeID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", playOrCap);
	PyDict_SetItemString(kwargs, "playOrCap", temp);
	Py_XDECREF(temp);
	callEventHandler("onSoundDeviceListChangedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onEditPlaybackVoiceDataEvent(uint64 serverConnectionHandlerID, anyID clientID, short* samples, int sampleCount, int channels) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	
	PyObject * samples_array;
	{
		int count = 0;
		for(int i = 0; i < sampleCount; i++) { count++; }
		samples_array = PyList_New(count);
		for(int i = 0; i < sampleCount; i++) {
			PyList_SetItem(samples_array, i, Py_BuildValue("h", samples[i]));
		}
	}
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onEditPlaybackVoiceDataEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("O", samples_array);
	PyDict_SetItemString(kwargs, "samples", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", sampleCount);
	PyDict_SetItemString(kwargs, "sampleCount", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", channels);
	PyDict_SetItemString(kwargs, "channels", temp);
	Py_XDECREF(temp);
	callEventHandler("onEditPlaybackVoiceDataEvent", kwargs);
	Py_XDECREF(samples_array);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onEditPostProcessVoiceDataEvent(uint64 serverConnectionHandlerID, anyID clientID, short* samples, int sampleCount, int channels, const unsigned int* channelSpeakerArray, unsigned int* channelFillMask) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	
	PyObject * samples_array;
	{
		int count = 0;
		for(int i = 0; i < sampleCount; i++) { count++; }
		samples_array = PyList_New(count);
		for(int i = 0; i < sampleCount; i++) {
			PyList_SetItem(samples_array, i, Py_BuildValue("h", samples[i]));
		}
	}
	
	PyObject * channelSpeakerArray_array;
	{
		int count = 0;
		for(int i = 0; channelSpeakerArray[i] != 0; i++) { count++; }
		channelSpeakerArray_array = PyList_New(count);
		for(int i = 0; channelSpeakerArray[i] != 0; i++) {
			PyList_SetItem(channelSpeakerArray_array, i, Py_BuildValue("i", channelSpeakerArray[i]));
		}
	}
	
	PyObject * channelFillMask_array;
	{
		int count = 0;
		for(int i = 0; channelFillMask[i] != 0; i++) { count++; }
		channelFillMask_array = PyList_New(count);
		for(int i = 0; channelFillMask[i] != 0; i++) {
			PyList_SetItem(channelFillMask_array, i, Py_BuildValue("i", channelFillMask[i]));
		}
	}
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onEditPostProcessVoiceDataEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("O", samples_array);
	PyDict_SetItemString(kwargs, "samples", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", sampleCount);
	PyDict_SetItemString(kwargs, "sampleCount", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", channels);
	PyDict_SetItemString(kwargs, "channels", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("O", channelSpeakerArray_array);
	PyDict_SetItemString(kwargs, "channelSpeakerArray", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("O", channelFillMask_array);
	PyDict_SetItemString(kwargs, "channelFillMask", temp);
	Py_XDECREF(temp);
	callEventHandler("onEditPostProcessVoiceDataEvent", kwargs);
	Py_XDECREF(samples_array);
	Py_XDECREF(channelSpeakerArray_array);
	Py_XDECREF(channelFillMask_array);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onEditMixedPlaybackVoiceDataEvent(uint64 serverConnectionHandlerID, short* samples, int sampleCount, int channels, const unsigned int* channelSpeakerArray, unsigned int* channelFillMask) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	
	PyObject * samples_array;
	{
		int count = 0;
		for(int i = 0; i < sampleCount; i++) { count++; }
		samples_array = PyList_New(count);
		for(int i = 0; i < sampleCount; i++) {
			PyList_SetItem(samples_array, i, Py_BuildValue("h", samples[i]));
		}
	}
	
	PyObject * channelSpeakerArray_array;
	{
		int count = 0;
		for(int i = 0; channelSpeakerArray[i] != 0; i++) { count++; }
		channelSpeakerArray_array = PyList_New(count);
		for(int i = 0; channelSpeakerArray[i] != 0; i++) {
			PyList_SetItem(channelSpeakerArray_array, i, Py_BuildValue("i", channelSpeakerArray[i]));
		}
	}
	
	PyObject * channelFillMask_array;
	{
		int count = 0;
		for(int i = 0; channelFillMask[i] != 0; i++) { count++; }
		channelFillMask_array = PyList_New(count);
		for(int i = 0; channelFillMask[i] != 0; i++) {
			PyList_SetItem(channelFillMask_array, i, Py_BuildValue("i", channelFillMask[i]));
		}
	}
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onEditMixedPlaybackVoiceDataEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("O", samples_array);
	PyDict_SetItemString(kwargs, "samples", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", sampleCount);
	PyDict_SetItemString(kwargs, "sampleCount", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", channels);
	PyDict_SetItemString(kwargs, "channels", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("O", channelSpeakerArray_array);
	PyDict_SetItemString(kwargs, "channelSpeakerArray", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("O", channelFillMask_array);
	PyDict_SetItemString(kwargs, "channelFillMask", temp);
	Py_XDECREF(temp);
	callEventHandler("onEditMixedPlaybackVoiceDataEvent", kwargs);
	Py_XDECREF(samples_array);
	Py_XDECREF(channelSpeakerArray_array);
	Py_XDECREF(channelFillMask_array);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onEditCapturedVoiceDataEvent(uint64 serverConnectionHandlerID, short* samples, int sampleCount, int channels, int* edited) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	
	PyObject * samples_array;
	{
		int count = 0;
		for(int i = 0; i < sampleCount; i++) { count++; }
		samples_array = PyList_New(count);
		for(int i = 0; i < sampleCount; i++) {
			PyList_SetItem(samples_array, i, Py_BuildValue("h", samples[i]));
		}
	}
	
	PyObject * edited_array;
	{
		int count = 0;
		for(int i = 0; edited[i] != 0; i++) { count++; }
		edited_array = PyList_New(count);
		for(int i = 0; edited[i] != 0; i++) {
			PyList_SetItem(edited_array, i, Py_BuildValue("i", edited[i]));
		}
	}
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onEditCapturedVoiceDataEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("O", samples_array);
	PyDict_SetItemString(kwargs, "samples", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", sampleCount);
	PyDict_SetItemString(kwargs, "sampleCount", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", channels);
	PyDict_SetItemString(kwargs, "channels", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("O", edited_array);
	PyDict_SetItemString(kwargs, "edited", temp);
	Py_XDECREF(temp);
	callEventHandler("onEditCapturedVoiceDataEvent", kwargs);
	Py_XDECREF(samples_array);
	Py_XDECREF(edited_array);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onCustom3dRolloffCalculationClientEvent(uint64 serverConnectionHandlerID, anyID clientID, float distance, float* volume) {
	return;
}
void ts3plugin_onCustom3dRolloffCalculationWaveEvent(uint64 serverConnectionHandlerID, uint64 waveHandle, float distance, float* volume) {
	return;
}
void ts3plugin_onUserLoggingMessageEvent(const char* logMessage, int logLevel, const char* logChannel, uint64 logID, const char* logTime, const char* completeLogString) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onUserLoggingMessageEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("s", logMessage);
	PyDict_SetItemString(kwargs, "logMessage", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", logLevel);
	PyDict_SetItemString(kwargs, "logLevel", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", logChannel);
	PyDict_SetItemString(kwargs, "logChannel", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", logID);
	PyDict_SetItemString(kwargs, "logID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", logTime);
	PyDict_SetItemString(kwargs, "logTime", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", completeLogString);
	PyDict_SetItemString(kwargs, "completeLogString", temp);
	Py_XDECREF(temp);
	callEventHandler("onUserLoggingMessageEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientBanFromServerEvent(uint64 serverConnectionHandlerID, anyID clientID, uint64 oldChannelID, uint64 newChannelID, int visibility, anyID kickerID, const char* kickerName, const char* kickerUniqueIdentifier, uint64 time, const char* kickMessage) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientBanFromServerEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", oldChannelID);
	PyDict_SetItemString(kwargs, "oldChannelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", newChannelID);
	PyDict_SetItemString(kwargs, "newChannelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", visibility);
	PyDict_SetItemString(kwargs, "visibility", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", kickerID);
	PyDict_SetItemString(kwargs, "kickerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", kickerName);
	PyDict_SetItemString(kwargs, "kickerName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", kickerUniqueIdentifier);
	PyDict_SetItemString(kwargs, "kickerUniqueIdentifier", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", time);
	PyDict_SetItemString(kwargs, "time", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", kickMessage);
	PyDict_SetItemString(kwargs, "kickMessage", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientBanFromServerEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
int ts3plugin_onClientPokeEvent(uint64 serverConnectionHandlerID, anyID fromClientID, const char* pokerName, const char* pokerUniqueIdentity, const char* message, int ffIgnored) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientPokeEvent\n");
		return 0;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", fromClientID);
	PyDict_SetItemString(kwargs, "fromClientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", pokerName);
	PyDict_SetItemString(kwargs, "pokerName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", pokerUniqueIdentity);
	PyDict_SetItemString(kwargs, "pokerUniqueIdentity", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", message);
	PyDict_SetItemString(kwargs, "message", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", ffIgnored);
	PyDict_SetItemString(kwargs, "ffIgnored", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientPokeEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return 0;
}
void ts3plugin_onClientSelfVariableUpdateEvent(uint64 serverConnectionHandlerID, int flag, const char* oldValue, const char* newValue) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientSelfVariableUpdateEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", flag);
	PyDict_SetItemString(kwargs, "flag", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", oldValue);
	PyDict_SetItemString(kwargs, "oldValue", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", newValue);
	PyDict_SetItemString(kwargs, "newValue", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientSelfVariableUpdateEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onFileListEvent(uint64 serverConnectionHandlerID, uint64 channelID, const char* path, const char* name, uint64 size, uint64 datetime, int type, uint64 incompletesize, const char* returnCode) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onFileListEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", path);
	PyDict_SetItemString(kwargs, "path", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", name);
	PyDict_SetItemString(kwargs, "name", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", size);
	PyDict_SetItemString(kwargs, "size", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", datetime);
	PyDict_SetItemString(kwargs, "datetime", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", type);
	PyDict_SetItemString(kwargs, "type", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", incompletesize);
	PyDict_SetItemString(kwargs, "incompletesize", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", returnCode);
	PyDict_SetItemString(kwargs, "returnCode", temp);
	Py_XDECREF(temp);
	callEventHandler("onFileListEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onFileListFinishedEvent(uint64 serverConnectionHandlerID, uint64 channelID, const char* path) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onFileListFinishedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", path);
	PyDict_SetItemString(kwargs, "path", temp);
	Py_XDECREF(temp);
	callEventHandler("onFileListFinishedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onFileInfoEvent(uint64 serverConnectionHandlerID, uint64 channelID, const char* name, uint64 size, uint64 datetime) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onFileInfoEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", name);
	PyDict_SetItemString(kwargs, "name", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", size);
	PyDict_SetItemString(kwargs, "size", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", datetime);
	PyDict_SetItemString(kwargs, "datetime", temp);
	Py_XDECREF(temp);
	callEventHandler("onFileInfoEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onServerGroupListEvent(uint64 serverConnectionHandlerID, uint64 serverGroupID, const char* name, int type, int iconID, int saveDB) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onServerGroupListEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", serverGroupID);
	PyDict_SetItemString(kwargs, "serverGroupID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", name);
	PyDict_SetItemString(kwargs, "name", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", type);
	PyDict_SetItemString(kwargs, "type", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", iconID);
	PyDict_SetItemString(kwargs, "iconID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", saveDB);
	PyDict_SetItemString(kwargs, "saveDB", temp);
	Py_XDECREF(temp);
	callEventHandler("onServerGroupListEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onServerGroupListFinishedEvent(uint64 serverConnectionHandlerID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onServerGroupListFinishedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	callEventHandler("onServerGroupListFinishedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onServerGroupByClientIDEvent(uint64 serverConnectionHandlerID, const char* name, uint64 serverGroupList, uint64 clientDatabaseID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onServerGroupByClientIDEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", name);
	PyDict_SetItemString(kwargs, "name", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", serverGroupList);
	PyDict_SetItemString(kwargs, "serverGroupList", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", clientDatabaseID);
	PyDict_SetItemString(kwargs, "clientDatabaseID", temp);
	Py_XDECREF(temp);
	callEventHandler("onServerGroupByClientIDEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onServerGroupPermListEvent(uint64 serverConnectionHandlerID, uint64 serverGroupID, unsigned int permissionID, int permissionValue, int permissionNegated, int permissionSkip) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onServerGroupPermListEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", serverGroupID);
	PyDict_SetItemString(kwargs, "serverGroupID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionID);
	PyDict_SetItemString(kwargs, "permissionID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionValue);
	PyDict_SetItemString(kwargs, "permissionValue", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionNegated);
	PyDict_SetItemString(kwargs, "permissionNegated", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionSkip);
	PyDict_SetItemString(kwargs, "permissionSkip", temp);
	Py_XDECREF(temp);
	callEventHandler("onServerGroupPermListEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onServerGroupPermListFinishedEvent(uint64 serverConnectionHandlerID, uint64 serverGroupID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onServerGroupPermListFinishedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", serverGroupID);
	PyDict_SetItemString(kwargs, "serverGroupID", temp);
	Py_XDECREF(temp);
	callEventHandler("onServerGroupPermListFinishedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onServerGroupClientListEvent(uint64 serverConnectionHandlerID, uint64 serverGroupID, uint64 clientDatabaseID, const char* clientNameIdentifier, const char* clientUniqueID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onServerGroupClientListEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", serverGroupID);
	PyDict_SetItemString(kwargs, "serverGroupID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", clientDatabaseID);
	PyDict_SetItemString(kwargs, "clientDatabaseID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", clientNameIdentifier);
	PyDict_SetItemString(kwargs, "clientNameIdentifier", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", clientUniqueID);
	PyDict_SetItemString(kwargs, "clientUniqueID", temp);
	Py_XDECREF(temp);
	callEventHandler("onServerGroupClientListEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onChannelGroupListEvent(uint64 serverConnectionHandlerID, uint64 channelGroupID, const char* name, int type, int iconID, int saveDB) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onChannelGroupListEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelGroupID);
	PyDict_SetItemString(kwargs, "channelGroupID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", name);
	PyDict_SetItemString(kwargs, "name", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", type);
	PyDict_SetItemString(kwargs, "type", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", iconID);
	PyDict_SetItemString(kwargs, "iconID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", saveDB);
	PyDict_SetItemString(kwargs, "saveDB", temp);
	Py_XDECREF(temp);
	callEventHandler("onChannelGroupListEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onChannelGroupListFinishedEvent(uint64 serverConnectionHandlerID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onChannelGroupListFinishedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	callEventHandler("onChannelGroupListFinishedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onChannelGroupPermListEvent(uint64 serverConnectionHandlerID, uint64 channelGroupID, unsigned int permissionID, int permissionValue, int permissionNegated, int permissionSkip) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onChannelGroupPermListEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelGroupID);
	PyDict_SetItemString(kwargs, "channelGroupID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionID);
	PyDict_SetItemString(kwargs, "permissionID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionValue);
	PyDict_SetItemString(kwargs, "permissionValue", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionNegated);
	PyDict_SetItemString(kwargs, "permissionNegated", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionSkip);
	PyDict_SetItemString(kwargs, "permissionSkip", temp);
	Py_XDECREF(temp);
	callEventHandler("onChannelGroupPermListEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onChannelGroupPermListFinishedEvent(uint64 serverConnectionHandlerID, uint64 channelGroupID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onChannelGroupPermListFinishedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelGroupID);
	PyDict_SetItemString(kwargs, "channelGroupID", temp);
	Py_XDECREF(temp);
	callEventHandler("onChannelGroupPermListFinishedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onChannelPermListEvent(uint64 serverConnectionHandlerID, uint64 channelID, unsigned int permissionID, int permissionValue, int permissionNegated, int permissionSkip) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onChannelPermListEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionID);
	PyDict_SetItemString(kwargs, "permissionID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionValue);
	PyDict_SetItemString(kwargs, "permissionValue", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionNegated);
	PyDict_SetItemString(kwargs, "permissionNegated", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionSkip);
	PyDict_SetItemString(kwargs, "permissionSkip", temp);
	Py_XDECREF(temp);
	callEventHandler("onChannelPermListEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onChannelPermListFinishedEvent(uint64 serverConnectionHandlerID, uint64 channelID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onChannelPermListFinishedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	callEventHandler("onChannelPermListFinishedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientPermListEvent(uint64 serverConnectionHandlerID, uint64 clientDatabaseID, unsigned int permissionID, int permissionValue, int permissionNegated, int permissionSkip) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientPermListEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", clientDatabaseID);
	PyDict_SetItemString(kwargs, "clientDatabaseID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionID);
	PyDict_SetItemString(kwargs, "permissionID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionValue);
	PyDict_SetItemString(kwargs, "permissionValue", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionNegated);
	PyDict_SetItemString(kwargs, "permissionNegated", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionSkip);
	PyDict_SetItemString(kwargs, "permissionSkip", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientPermListEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientPermListFinishedEvent(uint64 serverConnectionHandlerID, uint64 clientDatabaseID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientPermListFinishedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", clientDatabaseID);
	PyDict_SetItemString(kwargs, "clientDatabaseID", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientPermListFinishedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onChannelClientPermListEvent(uint64 serverConnectionHandlerID, uint64 channelID, uint64 clientDatabaseID, unsigned int permissionID, int permissionValue, int permissionNegated, int permissionSkip) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onChannelClientPermListEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", clientDatabaseID);
	PyDict_SetItemString(kwargs, "clientDatabaseID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionID);
	PyDict_SetItemString(kwargs, "permissionID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionValue);
	PyDict_SetItemString(kwargs, "permissionValue", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionNegated);
	PyDict_SetItemString(kwargs, "permissionNegated", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionSkip);
	PyDict_SetItemString(kwargs, "permissionSkip", temp);
	Py_XDECREF(temp);
	callEventHandler("onChannelClientPermListEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onChannelClientPermListFinishedEvent(uint64 serverConnectionHandlerID, uint64 channelID, uint64 clientDatabaseID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onChannelClientPermListFinishedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", clientDatabaseID);
	PyDict_SetItemString(kwargs, "clientDatabaseID", temp);
	Py_XDECREF(temp);
	callEventHandler("onChannelClientPermListFinishedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientChannelGroupChangedEvent(uint64 serverConnectionHandlerID, uint64 channelGroupID, uint64 channelID, anyID clientID, anyID invokerClientID, const char* invokerName, const char* invokerUniqueIdentity) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientChannelGroupChangedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelGroupID);
	PyDict_SetItemString(kwargs, "channelGroupID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", invokerClientID);
	PyDict_SetItemString(kwargs, "invokerClientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", invokerName);
	PyDict_SetItemString(kwargs, "invokerName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", invokerUniqueIdentity);
	PyDict_SetItemString(kwargs, "invokerUniqueIdentity", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientChannelGroupChangedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
int ts3plugin_onServerPermissionErrorEvent(uint64 serverConnectionHandlerID, const char* errorMessage, unsigned int error, const char* returnCode, unsigned int failedPermissionID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onServerPermissionErrorEvent\n");
		return 0;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", errorMessage);
	PyDict_SetItemString(kwargs, "errorMessage", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", error);
	PyDict_SetItemString(kwargs, "error", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", returnCode);
	PyDict_SetItemString(kwargs, "returnCode", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", failedPermissionID);
	PyDict_SetItemString(kwargs, "failedPermissionID", temp);
	Py_XDECREF(temp);
	callEventHandler("onServerPermissionErrorEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return 0;
}
void ts3plugin_onPermissionListGroupEndIDEvent(uint64 serverConnectionHandlerID, unsigned int groupEndID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onPermissionListGroupEndIDEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", groupEndID);
	PyDict_SetItemString(kwargs, "groupEndID", temp);
	Py_XDECREF(temp);
	callEventHandler("onPermissionListGroupEndIDEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onPermissionListEvent(uint64 serverConnectionHandlerID, unsigned int permissionID, const char* permissionName, const char* permissionDescription) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onPermissionListEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionID);
	PyDict_SetItemString(kwargs, "permissionID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", permissionName);
	PyDict_SetItemString(kwargs, "permissionName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", permissionDescription);
	PyDict_SetItemString(kwargs, "permissionDescription", temp);
	Py_XDECREF(temp);
	callEventHandler("onPermissionListEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onPermissionListFinishedEvent(uint64 serverConnectionHandlerID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onPermissionListFinishedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	callEventHandler("onPermissionListFinishedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onPermissionOverviewEvent(uint64 serverConnectionHandlerID, uint64 clientDatabaseID, uint64 channelID, int overviewType, uint64 overviewID1, uint64 overviewID2, unsigned int permissionID, int permissionValue, int permissionNegated, int permissionSkip) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onPermissionOverviewEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", clientDatabaseID);
	PyDict_SetItemString(kwargs, "clientDatabaseID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", channelID);
	PyDict_SetItemString(kwargs, "channelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", overviewType);
	PyDict_SetItemString(kwargs, "overviewType", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", overviewID1);
	PyDict_SetItemString(kwargs, "overviewID1", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", overviewID2);
	PyDict_SetItemString(kwargs, "overviewID2", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionID);
	PyDict_SetItemString(kwargs, "permissionID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionValue);
	PyDict_SetItemString(kwargs, "permissionValue", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionNegated);
	PyDict_SetItemString(kwargs, "permissionNegated", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionSkip);
	PyDict_SetItemString(kwargs, "permissionSkip", temp);
	Py_XDECREF(temp);
	callEventHandler("onPermissionOverviewEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onPermissionOverviewFinishedEvent(uint64 serverConnectionHandlerID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onPermissionOverviewFinishedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	callEventHandler("onPermissionOverviewFinishedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onServerGroupClientAddedEvent(uint64 serverConnectionHandlerID, anyID clientID, const char* clientName, const char* clientUniqueIdentity, uint64 serverGroupID, anyID invokerClientID, const char* invokerName, const char* invokerUniqueIdentity) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onServerGroupClientAddedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", clientName);
	PyDict_SetItemString(kwargs, "clientName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", clientUniqueIdentity);
	PyDict_SetItemString(kwargs, "clientUniqueIdentity", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", serverGroupID);
	PyDict_SetItemString(kwargs, "serverGroupID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", invokerClientID);
	PyDict_SetItemString(kwargs, "invokerClientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", invokerName);
	PyDict_SetItemString(kwargs, "invokerName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", invokerUniqueIdentity);
	PyDict_SetItemString(kwargs, "invokerUniqueIdentity", temp);
	Py_XDECREF(temp);
	callEventHandler("onServerGroupClientAddedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onServerGroupClientDeletedEvent(uint64 serverConnectionHandlerID, anyID clientID, const char* clientName, const char* clientUniqueIdentity, uint64 serverGroupID, anyID invokerClientID, const char* invokerName, const char* invokerUniqueIdentity) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onServerGroupClientDeletedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", clientName);
	PyDict_SetItemString(kwargs, "clientName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", clientUniqueIdentity);
	PyDict_SetItemString(kwargs, "clientUniqueIdentity", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", serverGroupID);
	PyDict_SetItemString(kwargs, "serverGroupID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", invokerClientID);
	PyDict_SetItemString(kwargs, "invokerClientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", invokerName);
	PyDict_SetItemString(kwargs, "invokerName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", invokerUniqueIdentity);
	PyDict_SetItemString(kwargs, "invokerUniqueIdentity", temp);
	Py_XDECREF(temp);
	callEventHandler("onServerGroupClientDeletedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientNeededPermissionsEvent(uint64 serverConnectionHandlerID, unsigned int permissionID, int permissionValue) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientNeededPermissionsEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionID);
	PyDict_SetItemString(kwargs, "permissionID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", permissionValue);
	PyDict_SetItemString(kwargs, "permissionValue", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientNeededPermissionsEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientNeededPermissionsFinishedEvent(uint64 serverConnectionHandlerID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientNeededPermissionsFinishedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientNeededPermissionsFinishedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onFileTransferStatusEvent(anyID transferID, unsigned int status, const char* statusMessage, uint64 remotefileSize, uint64 serverConnectionHandlerID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onFileTransferStatusEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("h", transferID);
	PyDict_SetItemString(kwargs, "transferID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", status);
	PyDict_SetItemString(kwargs, "status", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", statusMessage);
	PyDict_SetItemString(kwargs, "statusMessage", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", remotefileSize);
	PyDict_SetItemString(kwargs, "remotefileSize", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	callEventHandler("onFileTransferStatusEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientChatClosedEvent(uint64 serverConnectionHandlerID, anyID clientID, const char* clientUniqueIdentity) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientChatClosedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", clientUniqueIdentity);
	PyDict_SetItemString(kwargs, "clientUniqueIdentity", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientChatClosedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientChatComposingEvent(uint64 serverConnectionHandlerID, anyID clientID, const char* clientUniqueIdentity) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientChatComposingEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", clientUniqueIdentity);
	PyDict_SetItemString(kwargs, "clientUniqueIdentity", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientChatComposingEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onServerLogEvent(uint64 serverConnectionHandlerID, const char* logMsg) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onServerLogEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", logMsg);
	PyDict_SetItemString(kwargs, "logMsg", temp);
	Py_XDECREF(temp);
	callEventHandler("onServerLogEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onServerLogFinishedEvent(uint64 serverConnectionHandlerID, uint64 lastPos, uint64 fileSize) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onServerLogFinishedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", lastPos);
	PyDict_SetItemString(kwargs, "lastPos", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", fileSize);
	PyDict_SetItemString(kwargs, "fileSize", temp);
	Py_XDECREF(temp);
	callEventHandler("onServerLogFinishedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onMessageListEvent(uint64 serverConnectionHandlerID, uint64 messageID, const char* fromClientUniqueIdentity, const char* subject, uint64 timestamp, int flagRead) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onMessageListEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", messageID);
	PyDict_SetItemString(kwargs, "messageID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", fromClientUniqueIdentity);
	PyDict_SetItemString(kwargs, "fromClientUniqueIdentity", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", subject);
	PyDict_SetItemString(kwargs, "subject", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", timestamp);
	PyDict_SetItemString(kwargs, "timestamp", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", flagRead);
	PyDict_SetItemString(kwargs, "flagRead", temp);
	Py_XDECREF(temp);
	callEventHandler("onMessageListEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onMessageGetEvent(uint64 serverConnectionHandlerID, uint64 messageID, const char* fromClientUniqueIdentity, const char* subject, const char* message, uint64 timestamp) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onMessageGetEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", messageID);
	PyDict_SetItemString(kwargs, "messageID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", fromClientUniqueIdentity);
	PyDict_SetItemString(kwargs, "fromClientUniqueIdentity", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", subject);
	PyDict_SetItemString(kwargs, "subject", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", message);
	PyDict_SetItemString(kwargs, "message", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", timestamp);
	PyDict_SetItemString(kwargs, "timestamp", temp);
	Py_XDECREF(temp);
	callEventHandler("onMessageGetEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientDBIDfromUIDEvent(uint64 serverConnectionHandlerID, const char* uniqueClientIdentifier, uint64 clientDatabaseID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientDBIDfromUIDEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", uniqueClientIdentifier);
	PyDict_SetItemString(kwargs, "uniqueClientIdentifier", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", clientDatabaseID);
	PyDict_SetItemString(kwargs, "clientDatabaseID", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientDBIDfromUIDEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientNamefromUIDEvent(uint64 serverConnectionHandlerID, const char* uniqueClientIdentifier, uint64 clientDatabaseID, const char* clientNickName) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientNamefromUIDEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", uniqueClientIdentifier);
	PyDict_SetItemString(kwargs, "uniqueClientIdentifier", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", clientDatabaseID);
	PyDict_SetItemString(kwargs, "clientDatabaseID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", clientNickName);
	PyDict_SetItemString(kwargs, "clientNickName", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientNamefromUIDEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientNamefromDBIDEvent(uint64 serverConnectionHandlerID, const char* uniqueClientIdentifier, uint64 clientDatabaseID, const char* clientNickName) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientNamefromDBIDEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", uniqueClientIdentifier);
	PyDict_SetItemString(kwargs, "uniqueClientIdentifier", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", clientDatabaseID);
	PyDict_SetItemString(kwargs, "clientDatabaseID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", clientNickName);
	PyDict_SetItemString(kwargs, "clientNickName", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientNamefromDBIDEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onComplainListEvent(uint64 serverConnectionHandlerID, uint64 targetClientDatabaseID, const char* targetClientNickName, uint64 fromClientDatabaseID, const char* fromClientNickName, const char* complainReason, uint64 timestamp) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onComplainListEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", targetClientDatabaseID);
	PyDict_SetItemString(kwargs, "targetClientDatabaseID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", targetClientNickName);
	PyDict_SetItemString(kwargs, "targetClientNickName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", fromClientDatabaseID);
	PyDict_SetItemString(kwargs, "fromClientDatabaseID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", fromClientNickName);
	PyDict_SetItemString(kwargs, "fromClientNickName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", complainReason);
	PyDict_SetItemString(kwargs, "complainReason", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", timestamp);
	PyDict_SetItemString(kwargs, "timestamp", temp);
	Py_XDECREF(temp);
	callEventHandler("onComplainListEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onBanListEvent(uint64 serverConnectionHandlerID, uint64 banid, const char* ip, const char* name, const char* uid, uint64 creationTime, uint64 durationTime, const char* invokerName, uint64 invokercldbid, const char* invokeruid, const char* reason, int numberOfEnforcements, const char* lastNickName) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onBanListEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", banid);
	PyDict_SetItemString(kwargs, "banid", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", ip);
	PyDict_SetItemString(kwargs, "ip", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", name);
	PyDict_SetItemString(kwargs, "name", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", uid);
	PyDict_SetItemString(kwargs, "uid", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", creationTime);
	PyDict_SetItemString(kwargs, "creationTime", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", durationTime);
	PyDict_SetItemString(kwargs, "durationTime", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", invokerName);
	PyDict_SetItemString(kwargs, "invokerName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", invokercldbid);
	PyDict_SetItemString(kwargs, "invokercldbid", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", invokeruid);
	PyDict_SetItemString(kwargs, "invokeruid", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", reason);
	PyDict_SetItemString(kwargs, "reason", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", numberOfEnforcements);
	PyDict_SetItemString(kwargs, "numberOfEnforcements", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", lastNickName);
	PyDict_SetItemString(kwargs, "lastNickName", temp);
	Py_XDECREF(temp);
	callEventHandler("onBanListEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onClientServerQueryLoginPasswordEvent(uint64 serverConnectionHandlerID, const char* loginPassword) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onClientServerQueryLoginPasswordEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", loginPassword);
	PyDict_SetItemString(kwargs, "loginPassword", temp);
	Py_XDECREF(temp);
	callEventHandler("onClientServerQueryLoginPasswordEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onPluginCommandEvent(uint64 serverConnectionHandlerID, const char* pluginName, const char* pluginCommand) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onPluginCommandEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", pluginName);
	PyDict_SetItemString(kwargs, "pluginName", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", pluginCommand);
	PyDict_SetItemString(kwargs, "pluginCommand", temp);
	Py_XDECREF(temp);
	callEventHandler("onPluginCommandEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onIncomingClientQueryEvent(uint64 serverConnectionHandlerID, const char* commandText) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onIncomingClientQueryEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", commandText);
	PyDict_SetItemString(kwargs, "commandText", temp);
	Py_XDECREF(temp);
	callEventHandler("onIncomingClientQueryEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onServerTemporaryPasswordListEvent(uint64 serverConnectionHandlerID, const char* clientNickname, const char* uniqueClientIdentifier, const char* description, const char* password, uint64 timestampStart, uint64 timestampEnd, uint64 targetChannelID, const char* targetChannelPW) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onServerTemporaryPasswordListEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", clientNickname);
	PyDict_SetItemString(kwargs, "clientNickname", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", uniqueClientIdentifier);
	PyDict_SetItemString(kwargs, "uniqueClientIdentifier", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", description);
	PyDict_SetItemString(kwargs, "description", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", password);
	PyDict_SetItemString(kwargs, "password", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", timestampStart);
	PyDict_SetItemString(kwargs, "timestampStart", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", timestampEnd);
	PyDict_SetItemString(kwargs, "timestampEnd", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", targetChannelID);
	PyDict_SetItemString(kwargs, "targetChannelID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", targetChannelPW);
	PyDict_SetItemString(kwargs, "targetChannelPW", temp);
	Py_XDECREF(temp);
	callEventHandler("onServerTemporaryPasswordListEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onAvatarUpdated(uint64 serverConnectionHandlerID, anyID clientID, const char* avatarPath) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onAvatarUpdated\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("h", clientID);
	PyDict_SetItemString(kwargs, "clientID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", avatarPath);
	PyDict_SetItemString(kwargs, "avatarPath", temp);
	Py_XDECREF(temp);
	callEventHandler("onAvatarUpdated", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onMenuItemEvent(uint64 serverConnectionHandlerID, enum PluginMenuType type, int menuItemID, uint64 selectedItemID) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onMenuItemEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("L", serverConnectionHandlerID);
	PyDict_SetItemString(kwargs, "serverConnectionHandlerID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", type);
	PyDict_SetItemString(kwargs, "type", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("i", menuItemID);
	PyDict_SetItemString(kwargs, "menuItemID", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("L", selectedItemID);
	PyDict_SetItemString(kwargs, "selectedItemID", temp);
	Py_XDECREF(temp);
	callEventHandler("onMenuItemEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onHotkeyEvent(const char* keyword) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onHotkeyEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("s", keyword);
	PyDict_SetItemString(kwargs, "keyword", temp);
	Py_XDECREF(temp);
	callEventHandler("onHotkeyEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
void ts3plugin_onHotkeyRecordedEvent(const char* keyword, const char* key) {
	PyGILState_STATE gstate;
	gstate = PyGILState_Ensure();
	PyObject *kwargs = PyDict_New();
	if(!kwargs){
		printf("Failed to build value in function ts3plugin_onHotkeyRecordedEvent\n");
		return;
	}
	PyObject * temp = NULL;
	temp = Py_BuildValue("s", keyword);
	PyDict_SetItemString(kwargs, "keyword", temp);
	Py_XDECREF(temp);
	temp = Py_BuildValue("s", key);
	PyDict_SetItemString(kwargs, "key", temp);
	Py_XDECREF(temp);
	callEventHandler("onHotkeyRecordedEvent", kwargs);
	Py_XDECREF(kwargs);
	PyGILState_Release(gstate);
	return;
}
